# 此工作流的名字
name: Releases
# 工作流的执行时机，可以设定为定时执行，每次push后执行，手动执行等
on:
  # workflow_dispatch为在Github仓库的Actions面板中手动执行
  workflow_dispatch:
# 工作/任务，这里的工作是可以并行的。
jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    # 步骤
    steps:
      # 使用预制action：拉取最新的代码
      - uses: actions/checkout@v3
      # 步骤一的名称：
      - name: Install pnpm
        run: npm install -g pnpm@7.33.7
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: pnpm
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
      - name: Build App with Vite
        run: pnpm run build
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}
          path: |
            release/demo_?.?.?.dmg*
            release/mac
            release/demo_?.?.?.exe*
            release/win-unpacked
            release/demo_?.?.?.AppImage
            release/demo_?.?.?.snap
            release/linux-unpacked

      # - name: Create or Get Release
      #   uses: marvinpinto/action-automatic-releases@latest
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     automatic_release_tag: true
      #     prerelease: true

      # - name: Set Upload File Name
      #   id: set-upload-file-name
      #   run: |
      #     # 对于 macOS, 将文件名设置为 demo-mac.dmg
      #     if [ ${{ matrix.os }} = 'macos-latest' ]; then
      #       export FILE_NAME=demo-mac.dmg
      #       export FILE_EXT=dmg
      #     # 对于 Windows, 将文件名设置为 demo-windows.exe
      #     elif [ ${{ matrix.os }} = 'windows-latest' ]; then
      #       export FILE_NAME=demo-windows.exe
      #       export FILE_EXT=exe
      #     # 对于 Linux, 将文件名设置为 demo-linux.AppImage
      #     elif [ ${{ matrix.os }} = 'ubuntu-latest' ]; then
      #       export FILE_NAME=demo-linux.AppImage
      #       export FILE_EXT=AppImage
      #     fi
      #     # 将 FILE_EXT 环境变量的值设置为全局变量，以便后续步骤中使用
      #     echo "FILE_NAME=$FILE_NAME" >> $GITHUB_OUTPUT
      #     echo "FILE_EXT=$FILE_EXT" >> $GITHUB_OUTPUT
      #     exit 0

      # - name: Upload Release Asset
      #   id: upload-release-asset
      #   uses: actions/upload-release-asset@v1.0.0
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: release/demo_0.0.0.${{ steps.set-upload-file-name.outputs.FILE_EXT }} # 上传的文件路径
      #     asset_name: ${{ steps.set-upload-file-name.outputs.FILE_NAME }} # 上传的文件名
      #     asset_content_type: application/x-diskcopy # 上传的文件 MIME 类型
